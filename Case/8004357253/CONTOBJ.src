##-----------------------------------------------------------------------------------#
## Subprog CONTROLE(ABREV,OPTIONS,VALEUR,SUPP,STAT)
## Subprog CONTLIB(ABREV,OPTIONS,VALNUM,SUPP,STAT)
## Subprog CONTNUM(ABREV,OPTIONS,VALNUM,SUPP,STAT)
## Subprog LECTURE(ABREV,VALEUR,SUPP)
## Subprog TITOBJ(ABREV,OPTIONS,VALEUR)
## Subprog TITFNC(FNC,VALEUR)
## Subprog TITZON(TAB,ZON,VALEUR)
## Subprog TITACTION(ACTION,VALEUR)
## Subprog SELOBJ(ABREV,OPTIONS,NBCOL,COL,TIT)
## Subprog RESERVE(CODE)
## Subprog RESERVEAOB(CODE)
## Subprog CTLSLASH(CODE)
## Subprog SUPPN(CLE,SUPP)
##-----------------------------------------------------------------------------------#

#------------------------------------------------------------------------------------#
# Contrôle généralisé
#------------------------------------------------------------------------------------#
Subprog CONTROLE(ABREV,OPTIONS,VALEUR,SUPP,STAT)
Value    Char     ABREV
Value    Char     OPTIONS
Value    Char     VALEUR
Value    Char     SUPP
Variable Shortint STAT

$CONTOBJ
Local Integer I , J , K , T , RD
Local Integer NUMCLE , OUVRE , PSUB , PSPE , PSPV , PSTD , FILT
Local Char    PROGOBJ(GDIMFIC) , PROGSUB(GDIMFIC) , PROGSPE(GDIMFIC) , PROGSPV(GDIMFIC)
Local Char    FILTSUP(255) , ACTION(20)
Local Char    VALSUPP(GLONID2)(0..16)
Local Char    CHAINE(255) , CLE2(GLONID2)(1..20)
Local Integer NBCLE
Local Integer ISOC , OFSTAT , ONOL
Local Char    LEGCOD(GLONADI)
Local Char    GRPSIT(GLONAGF)
Local Char    OFCY(GLONFCY)

If dim(GFCY)>0 : OFCY = GFCY : Endif

Call SETPROG(ABREV,PROGOBJ,PROGSUB,PROGSPE,PROGSPV,PSTD,PSUB,PSPE,PSPV) From CONTOBJ

If !PSTD
 If GCPT130=1 & filinfo(filpath("TRT",GTABCPT+"GES"+ABREV,"adx"),0)>=0
  PROGOBJ = GTABCPT+"GES"+ABREV
 Else
  End
 Endif
Endif

# On peut maintenant passer cle1~cle3~cle4 dans SUPP sans être obligé de dimmensionner SUPP
NBCLE = 0
If dim(SUPP)=1 & instr(1,SUPP,"~")
 CHAINE = SUPP
 While CHAINE<>""
  NBCLE += 1
  I = instr(1,CHAINE,"~")
  If I
   CLE2(NBCLE) = left$(CHAINE,I-1)
   CHAINE = right$(CHAINE,I+1)
  Else
   CLE2(NBCLE) = CHAINE
   CHAINE = ""
  Endif
 Wend
Else
 For I=0 To dim(SUPP)-1
  NBCLE += 1
  CLE2(NBCLE) = SUPP(I)
 Next I
Endif
I = type(SUPP)-10
Local Char VALEUR2(I)(NBCLE)
For I=1 To NBCLE
 VALEUR2(I-1) = CLE2(I)
Next I

STAT = 0
NUMCLE = 1

I = instr(1,OPTIONS,"!")
If I
 If VALEUR="" : End : Endif
 OPTIONS = left$(OPTIONS,I-1)+right$(OPTIONS,I+1)
Endif
I = instr(1,OPTIONS,"$")
If I
 OPTIONS = left$(OPTIONS,I-1)+right$(OPTIONS,I+1) : OUVRE = 1
Endif
I = instr(1,OPTIONS,"#")
If I
 OPTIONS = left$(OPTIONS,I-1)+right$(OPTIONS,I+1) : FILT = 0
Else
 FILT = 1
Endif

Gosub NOMFIC From =PROGOBJ

If OUVRE | evalue("clalev([F:"+ABFIC+"])")=0
 If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
  Local File =GTABCPT+NOMFIC
 Else
  Gosub OUVFIC From =PROGOBJ
 Endif
Endif

Gosub SETCLE From =PROGOBJ
RD = 0

If dim([L]CLEVALEUR)<0 :  # VALEUR -> CLEPRIM, SUPP -> CLESEC
 T = evalue("type([F:"+ABFIC+"]"+CLEPRIM+")")
 If (T>=10 & VALEUR="") | (T<9 & val(VALEUR)=0)
  RD = 1
 Elsif num$(evalue("[F:"+ABFIC+"]"+CLEPRIM))<>VALEUR
  RD = 1
 Elsif CLESEC<>"" & CLESEC<>CLELIG & NBCLE=1 & num$(evalue("[F:"+ABFIC+"]"+CLESEC))<>VALEUR2
  RD = 1
 Elsif NBCLE>1
  For I=0 To dim(CLESEC)-1
   If CLESEC(I)<>"" & CLESEC(I)<>CLELIG & VALEUR2(I)<>"" & VALEUR2(I)<>num$(evalue("[F:"+ABFIC+"]"+CLESEC(I)))
    RD = 1 : Break
   Endif
  Next I
 Endif
 If RD
  Case T
   When 1,2,4,5,6,7,8,9 : Assign "[F:"+ABFIC+"]"+CLEPRIM With val(VALEUR)
   When 3               : Assign "[F:"+ABFIC+"]"+CLEPRIM With VALEUR
   When Default         : Assign "[F:"+ABFIC+"]"+CLEPRIM With VALEUR
  Endcase
  For I=0 To dim(CLESEC)-1
   If CLESEC(I)<>"" & dim([L]VALEUR2)>I
    If VALEUR2(I)<>"" or (dim([L]FLDLEG)>0 & [L]FLDLEG<>"" & CLESEC(I)=[L]FLDLEG)
     Case evalue("type([F:"+ABFIC+"]"+CLESEC(I)+")")
      When 1,2,4,5,6,7,8,9 : Assign "[F:"+ABFIC+"]"+CLESEC(I) With val([L]VALEUR2(I))
      When 3               : Assign "[F:"+ABFIC+"]"+CLESEC(I) With [L]VALEUR2(I)
      When Default         : Assign "[F:"+ABFIC+"]"+CLESEC(I) With [L]VALEUR2(I)
     Endcase
    Endif
   Endif
  Next I
 Endif

Else : ## GEODE
 If CLEFCY<>"" : Local Char SAVFCY(GLONFCY) : SAVFCY=GFCY : Endif
 If CLEDEP<>"" : Local Char SAVDEP(GLONDEP) : SAVDEP=GDEP : Endif

 If dim([L]VALEUR2)>1 : #  VALEUR -> CLEPRIM, SUPP(i)-> CLESEC(i)
  For I=0 To dim(CLESUPP)-1
   J=find(CLESUPP(I),CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1    : VALSUPP(I)=VALEUR
   Elsif J>1 : VALSUPP(I)=VALEUR2(J-2)
   Endif
  Next I
  If CLEFCY<>""
   J=find(CLEFCY,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1              : GFCY=VALEUR
   Elsif J>1           : GFCY=VALEUR2(J-2)
   Elsif dim([M]FCY)>1 : GFCY=[M]FCY(nolign-1)
   Elsif dim([M]FCY)>0 : GFCY=[M]FCY
   Endif
  Endif
  If CLEDEP<>""
   J=find(CLEDEP,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1              : GDEP=VALEUR
   Elsif J>1           : GDEP=VALEUR2(J-2)
   Elsif dim([M]DEP)>1 : GDEP=[M]DEP(nolign-1)
   Elsif dim([M]DEP)>0 : GDEP=[M]DEP
   Endif
  Endif
  J=find(CLEVALEUR,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
  If J>1 : VALEUR = VALEUR2(J-2) : Endif

 Else : # VALEUR -> CLEVALEUR, SUPP -> CLESUPP(i)~CLESUPP(i+1)
  Call SUPPN(VALEUR2,VALSUPP)
  If CLEFCY<>""
   If dim([M]FCY)>1    : GFCY=[M]FCY(nolign-1)
   Elsif dim([M]FCY)>0 : GFCY=[M]FCY
   Endif
  Endif
  If CLEDEP<>""
   If dim([M]DEP)>1    : GDEP=[M]DEP(nolign-1)
   Elsif dim([M]DEP)>0 : GDEP=[M]DEP
   Endif
  Endif
  If (CLEDEP<>"" & GDEP="") | (CLEFCY<>"" & GFCY="")
   Call SELKEY(NOMFIC,CLEFCY,CLEDEP,NUMCLE)
  Endif
 Endif

 T = evalue("type([F:"+ABFIC+"]"+CLEVALEUR+")")
 RD=0
 If (T>=10 & VALEUR="") | (T<9 & val(VALEUR)=0)
  RD = 1
 Elsif num$(evalue("[F:"+ABFIC+"]"+CLEVALEUR))<>VALEUR
  RD = 1
 Elsif CLEFCY<>"" & num$(evalue("[F:"+ABFIC+"]"+CLEFCY))<>GFCY
  RD = 1
 Elsif CLEDEP<>"" & num$(evalue("[F:"+ABFIC+"]"+CLEDEP))<>GDEP
  RD = 1
 Else
  For I=0 To dim(CLESUPP)-1
   If CLESUPP(I)<>"" & num$(evalue("[F:"+ABFIC+"]"+CLESUPP(I)))<>VALSUPP(I)
    RD = 1 : Break
   Endif
  Next I
 Endif
 If RD
  Case T
   When 1,2,4,5,6,7,8,9 : Assign "[F:"+ABFIC+"]"+CLEVALEUR With val(VALEUR)
   When 3               : Assign "[F:"+ABFIC+"]"+CLEVALEUR With evalue("["+VALEUR+"]")
   When Default         : Assign "[F:"+ABFIC+"]"+CLEVALEUR With VALEUR
  Endcase
  For I=0 To dim(CLESUPP)-1
   If CLESUPP(I)<>""
    Case evalue("type([F:"+ABFIC+"]"+CLESUPP(I)+")")
     When 1,2,4,5,6,7,8,9 : Assign "[F:"+ABFIC+"]"+CLESUPP(I) With val(VALSUPP(I))
     When 3               : Assign "[F:"+ABFIC+"]"+CLESUPP(I) With evalue("["+VALSUPP(I)+"]")
     When Default         : Assign "[F:"+ABFIC+"]"+CLESUPP(I) With VALSUPP(I)
    Endcase
   Endif
  Next I
  If CLEFCY<>"" : Assign "[F:"+ABFIC+"]"+CLEFCY With GFCY : Endif
  If CLEDEP<>"" : Assign "[F:"+ABFIC+"]"+CLEDEP With GDEP : Endif
 Endif
Endif

Gosub DEFAUT From =PROGOBJ : # Pour FILTSUP
If RD
 Assign "[G:"+ABFIC+"]currind" With NUMCLE
 If TYPGES=3 & ((dim([L]VALEUR2)>1 & dim([L]CLEVALEUR)>0)
&              | !(VALEUR<>"" & dim([L]CLEVALEUR)>0 & CLEVALEUR=CLELIG))
  Assign "[G:"+ABFIC+"]currlen" With dim(CLESEC)
 Else
  Assign "[G:"+ABFIC+"]currlen" With 0
 Endif
 Read =
 If fstat
  Raz [F]
 Endif
Else
 fstat = 0
Endif
If [L]FILT & fstat=0
 [L]ACTION = "FILTRE" : Gosub ACTION From GOBJET
 fstat = 0 : # mb 19.10.10 Bug 68396
 Gosub DEFAUT From =PROGOBJ : # Pour FILTSUP
 Default [V] , [F] , [L] , [S] ,  [M] : # Il faut privilégier la classe [F]
 If [L]FILTSUP<>"" & !evalue([L]FILTSUP)
  fstat = 4
 Endif
 Default [V] , [L] , [S] , [M] , [F]
Endif
If inpmode<>2 : Goto RST_ENV : Endif

# Pas trouvé

If fstat
 If (T>=10 & VALEUR="") | (T<10 & val(VALEUR)=0)
  GMESSAGE = mess(10,123,1) : # Zone obligatoire
  [L]STAT = 2
  Goto RST_ENV
 Elsif dim([L]VALEUR2)<=1 & dim([L]CLEVALEUR)<0 & evalue("type([F]"+CLEPRIM+")")>10 & dim(PARSEL)>0 & dim(GAUTOSEL)>0 & GAUTOSEL=2 & GWEBSERV<>1
  PARSEL(4) = 'left$([F]'+CLEPRIM+','+num$(len([L]VALEUR))+')='
  If instr(1,[L]VALEUR,"'") & instr(1,[L]VALEUR,'"')
   PARSEL(4) += 'num$([L]VALEUR)'
  Elsif instr(1,[L]VALEUR,'"')
   PARSEL(4) += "'"+[L]VALEUR+"'"
  Else
   PARSEL(4) += '"'+[L]VALEUR+'"'
  Endif
  If evalue("dim([F:"+ABFIC+"]ENAFLG)")>0 & FILT & ABFIC<>"ADI"
   PARSEL(4) += '&[F]ENAFLG=2'
  Endif
  If dim([L]VALEUR2)>0
   For I=0 To dim(CLESEC)-1
    If CLESEC(I)<>"" & dim([L]VALEUR2)>I
     If VALEUR2(I)<>""
      Case evalue("type([F:"+ABFIC+"]"+CLESEC(I)+")")
       When 1,2,4,5,6,7,8,9
        PARSEL(5) += '&[F]'+CLESEC(I)+'='+[L]VALEUR2(I)
       When 3
        If [L]VALEUR2(I)="" : [L]VALEUR2(I) = "00000000" : Endif
        If instr(1,[L]VALEUR2(I),"/")
         PARSEL(5) += '&[F]'+CLESEC(I)+'=['+[L]VALEUR2(I)+']'
        Else
         PARSEL(5) += '&[F]'+CLESEC(I)+'='+format$(GFMD,[L]VALEUR2(I))
        Endif
       When Default
        PARSEL(5) += '&[F]'+CLESEC(I)+'='
        If instr(1,[L]VALEUR2(I),"'") & instr(1,[L]VALEUR2(I),'"')
         PARSEL(5) += 'num$([L]VALEUR2(I))'
        Elsif instr(1,[L]VALEUR2(I),'"')
         PARSEL(5) += "'"+[L]VALEUR2(I)+"'"
        Else
         PARSEL(5) += '"'+[L]VALEUR2(I)+'"'
        Endif
      Endcase
     Endif
    Endif
   Next I
  Endif
  K = 0
  For [F] Where evalue(PARSEL)
   K += 1
  Next F
  If K=0
   Gosub ERMSG
   GMESSAGE += "\"+mess(23,100,1) : # Fiche inexistante
   [L]STAT = 2
   Goto RST_ENV
  Elsif K=1
   [L]VALEUR = num$(evalue("[F]"+CLEPRIM))
  Else
   PARSEL(1) = ABREV
   PARSEL(2) = OPTIONS
   If OUVRE & !instr(1,PARSEL(2),"$")
    PARSEL(2) += "$"
   Endif
   If !FILT & !instr(1,PARSEL(2),"#")
    PARSEL(2) += "#"
   Endif
   Call S_TAB_CHAR([L]VALEUR,PARSEL,"SELOBJCRIT","SELOBJ","") From GACTION
  Endif
 Else
  Gosub ERMSG
  GMESSAGE += "\"+mess(23,100,1) : # Fiche inexistante
  [L]STAT = 2
  Goto RST_ENV
 Endif
Endif

# Flag actif

If evalue("dim([F:"+ABFIC+"]ENAFLG)")>0 & ABFIC<>"ADI"
 If FILT & evalue("[F:"+ABFIC+"]ENAFLG")<>2
  Gosub ERMSG
  GMESSAGE += "\"+mess(2,126,1) : # Fiche inactive
  [L]STAT = 2
  Goto RST_ENV
 Endif
Endif

## Filtrage par groupe de site

If dim([L]FLDGRF)>0 & [L]FLDGRF<>""
 J = evalue("dim([F:"+ABFIC+"]"+[L]FLDGRF+")")
 If dim([V]GCURFCY)>0 & GCURFCY<>"" & J>0
  GRPSIT = evalue("[F:"+ABFIC+"]"+[L]FLDGRF)
  If GRPSIT<>""
   If clalev([F:FGR])=0 : Local File FACGROUP [FGR] : Endif
   Look [FGR]FGR0 = GRPSIT;GCURFCY
   If fstat
    Gosub ERMSG
    GMESSAGE += "\"+mess(23,127,1)-":"-GRPSIT : # Réservé au groupe de site
    [L]STAT = 2
    Goto RST_ENV
   Endif
  Endif
 Endif
Endif

## Filtrage par groupe de société

If dim([L]FLDGRC)>0 & [L]FLDGRC<>""
 J = evalue("dim([F:"+ABFIC+"]"+[L]FLDGRC+")")
 If dim([V]GSOCIETE)>0 & GSOCIETE<>"" & J>0
  GRPSIT = evalue("[F:"+ABFIC+"]"+[L]FLDGRC)
  If GRPSIT<>""
   If clalev([F:AGC])=0 : Local File AGRPCPY [AGC] : Endif
   Look [AGC]AGC0 = GRPSIT;GSOCIETE
   If fstat
    Gosub ERMSG
    GMESSAGE += "\"+mess(63,127,1)-":"-GRPSIT : # Réservé au groupe de société
    [L]STAT = 2
    Goto RST_ENV
   Endif
  Endif
 Endif
Endif

## Filtrage par législation

If dim([L]FLDLEG)>0 & [L]FLDLEG<>"" & !find(GABREV,"FCY","CPY") & !find(ABFIC,"FCY","CPY")
 If dim([V]GCURLEG)>0 & GCURLEG<>"" : # Pour éviter des erreurs si le champ LEG de la société n'est pas renseigné
  J = evalue("dim([F:"+ABFIC+"]"+[L]FLDLEG+")")
  If J=1
   LEGCOD = evalue("[F:"+ABFIC+"]"+[L]FLDLEG)
   If LEGCOD<>"" & LEGCOD<>GCURLEG
    Gosub ERMSG
    GMESSAGE += "\"+mess(62,127,1)-":"-LEGCOD : # Réservé à la législation
    [L]STAT = 2
    Goto RST_ENV
   Endif
  Elsif J>1
   K = 0
   For [L]I=0 To J-1
    LEGCOD = evalue("[F:"+ABFIC+"]"+[L]FLDLEG+"("+num$([L]I)+")")
    If LEGCOD=GCURLEG
     K = 1 : Break
    Endif
    If ABFIC="TFO" & [L]I=0 & evalue("[F:"+ABFIC+"]"+[L]FLDLEG+"(1)")=""
     K = 1 : Break : # Pas de contrôle si une seule législation référencée dans la table des formules
    Endif
   Next I
   If !K
    Gosub ERMSG
    GMESSAGE += "\"+func AFNC.MES1(mess(132,127,1),GCURLEG) : # Législation $1$ non référencée dans ce paramétrage
    [L]STAT = 2
    Goto RST_ENV
   Endif
  Endif
 Endif
Endif

###

If OPTIONS<>""
 If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
  Local File =GTABCPT+"ATEXTE" [ATX]
 Endif
 Gosub DEFAUT From =PROGOBJ
 Gosub OPTIONS From =PROGOBJ
 Default [F],[S],[L],[V],[M]
 For [L]I=1 To [L]NBCOND
  If instr(1,[L]OPTIONS,[L]OPT([L]I))
   If !evalue([L]CONDIT([L]I))
    Gosub ERMSG2
    GMESSAGE = vireblc(GMESSAGE,2)-":"-[L]MESSAG([L]I)
    [L]STAT = 2
    Break
   Endif
  Endif
 Next I
 Default [S],[L],[V],[M],[F]
Endif
Assign "[G:"+ABFIC+"]currlen" With 0

$RST_ENV
If dim(SAVFCY)>0 : GFCY=SAVFCY : Endif
If dim(SAVDEP)>0 : GDEP=SAVDEP : Endif
If dim(OFCY)>0 & dim(GFCY)>0 : GFCY = OFCY : Endif
End

$ERMSG
If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
 If clalev([F:ATX]) : Close Local File [ATX] : Endif
 Local File =GTABCPT+"ATEXTE" [ATX]
Endif
Gosub TIT From =PROGOBJ
Gosub ERMSG2
GMESSAGE = TIT-":"-GMESSAGE
Return

$ERMSG2
If !GIMPORT & (dim([L]DSYPAR)<0 | ![L]DSYPAR) & (dim(GNBTABLEG)<0 | !find(NOMFIC,GTABLEG(1..GNBTABLEG)))
 GMESSAGE = [L]VALEUR
Elsif dim([L]CLEVALEUR)<0
 GMESSAGE = sigma(0,dim(VALEUR2)-1,VALEUR2(indcum)+" ")-VALEUR
Elsif GIMPORT
 GMESSAGE = string$(CLEFCY<>"",GFCY)-string$(CLEDEP<>"",GDEP)
 GMESSAGE-= sigma(0,dim(VALSUPP)-1,VALSUPP(indcum)+" ")-VALEUR
Else
 GMESSAGE = sigma(0,dim(VALSUPP)-1,VALSUPP(indcum)+" ")-VALEUR
Endif
Return

#------------------------------------------------------------------------------------#
# GEODE
#------------------------------------------------------------------------------------#
Subprog SELKEY(FICHIER,CLEFCY,CLEDEP,NUMCLE)
Value Char FICHIER(), CLEFCY(),CLEDEP()
Variable Integer NUMCLE

Local File ATABIND [ATI_]
Local Integer I1, I2, J, K, OK
Local Char CLE1(250), CLE2(50), CLE(30)(0..16)

NUMCLE=0
For [ATI_]NUMLIG Where CODFIC=FICHIER
 OK=1
 CLE1 = [F:ATI_]DESCRIPT
 While CLE1<>""
  I1 = instr(1,CLE1,"+")
  I2 = instr(1,CLE1,"-")
  If I2
   If I1 : I1 = min(I1,I2) : Else : I1 = I2 : Endif
  Endif
  If I1
   CLE2 = left$(CLE1,I1-1)
   CLE1 = right$(CLE1,I1+1)
  Else
   CLE2 = CLE1
   CLE1 = ""
  Endif
  If [F:ATI_]NUMLIG=1
   If (CLEDEP<>"" & GDEP="" & CLE2=CLEDEP) | (CLEFCY<>"" & GFCY="" & CLE2=CLEFCY)
    OK=0
   Else
    CLE(K)=CLE2 : K+=1
   Endif
  Elsif !find(CLE2,CLE(0..K-1))
   OK=0 : Break
  Endif
 Wend
 If OK : NUMCLE=[F:ATI_]NUMLIG : Break : Endif
Next
If NUMCLE=0 : NUMCLE=1 : Endif
End

#------------------------------------------------------------------------------------#
# GEODE : cle = cleprim~clesec(0)~...~clesec(n) => clevaleur~clesupp(0)~...~clesupp(n)
#------------------------------------------------------------------------------------#
Subprog CNVKEY(OBJET,CLE)
Value    Char OBJET()
Variable Char CLE()

If OBJET="" : End : Endif
GERREUR=0
Onerrgo CHUT From CONTROLE
Gosub SETCLE From="WO"+OBJET
Onerrgo
If GERREUR : GERREUR=0 : End : Endif
If dim([L]CLEVALEUR)<0 : End : Endif

## GEODE
Local Integer I, J, K3, N
Local Char    VCLE(80)(0..16), CLEX3(100)
CLEX3 = CLE
CLE   = ""
While CLEX3<>""
 J=instr(1,CLEX3,"~")
 If !J
  VCLE(N)=CLEX3
  CLEX3=""
 Else
  VCLE(N) = left$(CLEX3,J-1)
  CLEX3 = right$(CLEX3,J+1)
 Endif
 If N & CLELIG<>"" & CLESEC(N-1)=CLELIG : K3=1 : Endif
 N+=1
Wend
J=find(CLEVALEUR,CLEPRIM,CLESEC)
If J>0 : CLE=VCLE(J-1) : Else CLE="" : Endif
For I=0 To dim(CLESUPP)-1
 If CLESUPP(I)<>"" & (CLESUPP(I)<>CLELIG | K3)
  J=find(CLESUPP(I),CLEPRIM,CLESEC)
  If J>0 : CLE+="~"+VCLE(J-1) : Else CLE+="~" : Endif
 Endif
Next I
End

#------------------------------------------------------------------------------------#
# Transfére les chaînes séparées par un ~ dans une variable dimensionnée
#------------------------------------------------------------------------------------#
Subprog SUPPN(CLE,SUPP)
Value    Char CLE()    : # p1~p2
Variable Char SUPP()() : # SUPP(0)=p1, SUPP(1)=p2
Local Integer K, N
Raz SUPP
Repeat
 K = instr(1,CLE,"~")
 If !K : SUPP(N)=CLE : N+=1 : Break : Endif
 SUPP(N) = left$(CLE,K-1) : N+=1
 CLE = right$(CLE,K+1)
Until dim(SUPP)=N
End

#------------------------------------------------------------------------------------#
# Contrôle sur champ en interactif avec fenêtre de sélection si clé inexistante
#------------------------------------------------------------------------------------#
Subprog CONTSEL(ABREV,OPTIONS,VALEUR,SUPP,STAT)
Value    Char     ABREV
Value    Char     OPTIONS
Variable Char     VALEUR
Value    Char     SUPP
Variable Shortint STAT
Local Char PARSEL(250)(1..5)
Goto CONTOBJ

#------------------------------------------------------------------------------------#
# Cas où l'argument est numérique
#------------------------------------------------------------------------------------#
Subprog CONTNUM(ABREV,OPTIONS,VALNUM,SUPP,STAT)
Value    Char     ABREV
Value    Char     OPTIONS
Variable Decimal  VALNUM
Value    Char     SUPP
Variable Shortint STAT
Local Char VALEUR(30)
If instr(1,OPTIONS,"!") & VALNUM=0 : End : Endif
VALEUR = num$(VALNUM)
Call CONTROLE(ABREV,OPTIONS,VALEUR,SUPP,STAT)
VALNUM = val(VALEUR)
End

#------------------------------------------------------------------------------------#
# Cas où l'argument est libellé
#------------------------------------------------------------------------------------#
Subprog CONTLIB(ABREV,OPTIONS,VALNUM,SUPP,STAT)
Value    Char     ABREV
Value    Char     OPTIONS
Variable Integer  VALNUM
Value    Char     SUPP
Variable Shortint STAT
Local Char VALEUR(30)
VALEUR = num$(VALNUM)
Call CONTROLE(ABREV,OPTIONS,VALEUR,SUPP,STAT)
VALNUM = val(VALEUR)
End

#-----------------------------------------------------------------------------#
# Permet d'éviter la lecture si la classe [F] est correctement renseignée
#-----------------------------------------------------------------------------#
Subprog LECTURE(ABREV,VALEUR,SUPP)
Value    Char     ABREV
Value    Char     VALEUR
Value    Char     SUPP

Local Char    PROGOBJ(GDIMFIC) , PROGSUB(GDIMFIC) , PROGSPE(GDIMFIC) , PROGSPV(GDIMFIC)
Local Integer NUMCLE , PSTD , PSUB , PSPE, PSPV
Local Char    VALSUPP(GLONID2)(0..16)
Local Char    CHAINE(255) , CLE2(GLONID2)(1..20)
Local Integer I , J , NBCLE , RD
Local Char    OFCY(GLONFCY)

If dim(GFCY)>0 : OFCY = GFCY : Endif

Call SETPROG(ABREV,PROGOBJ,PROGSUB,PROGSPE,PROGSPV,PSTD,PSUB,PSPE,PSPV) From CONTOBJ

If !PSTD
 If GCPT130=1 & filinfo(filpath("TRT",GTABCPT+"GES"+ABREV,"adx"),0)>=0
  PROGOBJ = GTABCPT+"GES"+ABREV
 Else
  End
 Endif
Endif

# On peut maintenant passer cle1~cle3~cle4 dans SUPP sans être obligé de dimmensionner SUPP
NBCLE = 0
If dim(SUPP)=1 & instr(1,SUPP,"~")
 CHAINE = SUPP
 While CHAINE<>""
  NBCLE += 1
  I = instr(1,CHAINE,"~")
  If I
   CLE2(NBCLE) = left$(CHAINE,I-1)
   CHAINE = right$(CHAINE,I+1)
  Else
   CLE2(NBCLE) = CHAINE
   CHAINE = ""
  Endif
 Wend
Else
 For I=0 To dim(SUPP)-1
  NBCLE += 1
  CLE2(NBCLE) = SUPP(I)
 Next I
Endif
I = type(SUPP)-10
Local Char VALEUR2(I)(NBCLE)
For I=1 To NBCLE
 VALEUR2(I-1) = CLE2(I)
Next I

NUMCLE = 1

Gosub NOMFIC From =PROGOBJ
If evalue("clalev([F:"+ABFIC+"])")=0
 fstat=5 : End
Endif
Gosub SETCLE From =PROGOBJ

If dim([L]CLEVALEUR)<0 : # VALEUR -> CLEPRIM, SUPP -> CLESEC
 RD = 0
 If VALEUR="" | num$(evalue("[F:"+ABFIC+"]"+CLEPRIM))<>VALEUR
  RD = 1
 Elsif (CLESEC<>"" & CLESEC<>CLELIG & NBCLE=1 & num$(evalue("[F:"+ABFIC+"]"+CLESEC))<>VALEUR2)
  RD = 1
 Elsif NBCLE>1
  For I=0 To dim(CLESEC)-1
   If CLESEC(I)<>"" & CLESEC(I)<>CLELIG & VALEUR2(I)<>"" & VALEUR2(I)<>num$(evalue("[F:"+ABFIC+"]"+CLESEC(I)))
    RD = 1 : Break
   Endif
  Next I
 Endif
 If RD
  Gosub DEFAUT From =PROGOBJ
  Case evalue("type([F:"+ABFIC+"]"+CLEPRIM+")")
   When 1,2,4,5,6,7,8,9
    Assign "[F:"+ABFIC+"]"+CLEPRIM With val(VALEUR)
   When 3
    If VALEUR="" : VALEUR = "00000000" : Endif
    If instr(1,VALEUR,"/")
     Assign "[F:"+ABFIC+"]"+CLEPRIM With evalue("["+VALEUR+"]")
    Else
     Assign "[F:"+ABFIC+"]"+CLEPRIM With VALEUR
    Endif
   When Default
    Assign "[F:"+ABFIC+"]"+CLEPRIM With VALEUR
  Endcase
  For I=0 To dim(CLESEC)-1
   If CLESEC(I)<>"" and dim(VALEUR2)>I
    If VALEUR2(I)<>""
     Case evalue("type([F:"+ABFIC+"]"+CLESEC(I)+")")
      When 1,2,4,5,6,7,8,9
       Assign "[F:"+ABFIC+"]"+CLESEC(I) With val(VALEUR2(I))
      When 3
       If VALEUR2(I)="" : VALEUR2(I) = "00000000" : Endif
       If instr(1,VALEUR2(I),"/")
        Assign "[F:"+ABFIC+"]"+CLESEC(I) With evalue("["+VALEUR2(I)+"]")
       Else
        Assign "[F:"+ABFIC+"]"+CLESEC(I) With VALEUR2(I)
       Endif
      When Default
       Assign "[F:"+ABFIC+"]"+CLESEC(I) With VALEUR2(I)
     Endcase
    Elsif TYPGES=3
     Case evalue("type([F:"+ABFIC+"]"+CLESEC(I)+")")
      When 1,2,4,5,6,7,8,9 : Assign "[F:"+ABFIC+"]"+CLESEC(I) With 1
      When 3               : # ?
      When Default         : Assign "[F:"+ABFIC+"]"+CLESEC(I) With "1"
     Endcase
    Endif
   Endif
  Next I
 Else
  fstat=0 : End
 Endif

Else : ## GEODE
 If CLEFCY<>"" : Local Char SAVFCY(GLONFCY)  : SAVFCY=GFCY : Endif
 If CLEDEP<>"" : Local Char SAVDEP(GLONDEP) : SAVDEP=GDEP : Endif

 If dim([L]VALEUR2)>1 : #  VALEUR -> CLEPRIM, SUPP(i)-> CLESEC(i)
  For I=0 To dim(CLESUPP)-1
   J=find(CLESUPP(I),CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1    : VALSUPP(I)=VALEUR
   Elsif J>1 : VALSUPP(I)=VALEUR2(J-2)
   Endif
  Next I
  If CLEFCY<>""
   J=find(CLEFCY,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1              : GFCY=VALEUR
   Elsif J>1           : GFCY=VALEUR2(J-2)
   Elsif dim([M]FCY)>1 : GFCY=[M]FCY(nolign-1)
   Elsif dim([M]FCY)>0 : GFCY=[M]FCY
   Endif
  Endif
  If CLEDEP<>""
   J=find(CLEDEP,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
   If J=1              : GDEP=VALEUR
   Elsif J>1           : GDEP=VALEUR2(J-2)
   Elsif dim([M]DEP)>1 : GDEP=[M]DEP(nolign-1)
   Elsif dim([M]DEP)>0 : GDEP=[M]DEP
   Endif
  Endif
  J=find(CLEVALEUR,CLEPRIM,CLESEC(0..dim(CLESEC)-1))
  If J>1 : VALEUR = VALEUR2(J-2) : Endif

 Else : # VALEUR -> CLEVALEUR, SUPP -> CLESUPP(i)~CLESUPP(i+1)
  Call SUPPN(VALEUR2,VALSUPP)
  If CLEFCY<>""
   If dim([M]FCY)>1    : If nolign : GFCY=[M]FCY(nolign-1) : Endif
   Elsif dim([M]FCY)>0 : GFCY=[M]FCY
   Endif
  Endif
  If CLEDEP<>""
   If dim([M]DEP)>1    : If nolign : GDEP=[M]DEP(nolign-1) : Endif
   Elsif dim([M]DEP)>0 : GDEP=[M]DEP
   Endif
  Endif
  If (CLEDEP<>"" & GDEP="") | (CLEFCY<>"" & GFCY="")
   Call SELKEY(NOMFIC,CLEFCY,CLEDEP,NUMCLE)
  Endif
 Endif

 RD=0
 If VALEUR="" | num$(evalue("[F:"+ABFIC+"]"+CLEVALEUR))<>VALEUR
  RD=1
 Elsif CLEFCY<>"" & num$(evalue("[F:"+ABFIC+"]"+CLEFCY))<>GFCY
  RD = 1
 Elsif CLEDEP<>"" & num$(evalue("[F:"+ABFIC+"]"+CLEDEP))<>GDEP
  RD = 1
 Else
  For I=0 To dim(CLESUPP)-1
   If CLESUPP(I)<>"" & num$(evalue("[F:"+ABFIC+"]"+CLESUPP(I)))<>VALSUPP(I)
    RD=1 : Break
   Endif
  Next I
 Endif
 If !RD : fstat=0 : Goto RST_ENV : Endif

 Case evalue("type([F:"+ABFIC+"]"+CLEVALEUR+")")
  When 1,2,4,5,6,7,8,9
   Assign "[F:"+ABFIC+"]"+CLEVALEUR With val(VALEUR)
  When 3
   If VALEUR="" : VALEUR = "00000000" : Endif
   If instr(1,VALEUR,"/")
    Assign "[F:"+ABFIC+"]"+CLEVALEUR With evalue("["+VALEUR+"]")
   Else
    Assign "[F:"+ABFIC+"]"+CLEVALEUR With VALEUR
   Endif
  When Default
   Assign "[F:"+ABFIC+"]"+CLEVALEUR With VALEUR
 Endcase
 For I=0 To dim(CLESUPP)-1
  If CLESUPP(I)<>""
   Case evalue("type([F:"+ABFIC+"]"+CLESUPP(I)+")")
    When 1,2,4,5,6,7,8,9
     Assign "[F:"+ABFIC+"]"+CLESUPP(I) With val(VALSUPP(I))
    When 3
     If VALSUPP(I)="" : VALSUPP(I) = "00000000" : Endif
     If instr(1,VALSUPP(I),"/")
      Assign "[F:"+ABFIC+"]"+CLESUPP(I) With evalue("["+VALSUPP(I)+"]")
     Else
      Assign "[F:"+ABFIC+"]"+CLESUPP(I) With VALSUPP(I)
     Endif
    When Default
     Assign "[F:"+ABFIC+"]"+CLESUPP(I) With VALSUPP(I)
   Endcase
  Endif
 Next I
 If CLEFCY<>"" : Assign "[F:"+ABFIC+"]"+CLEFCY With GFCY : Endif
 If CLEDEP<>"" : Assign "[F:"+ABFIC+"]"+CLEDEP With GDEP : Endif
Endif

Assign "[G:"+ABFIC+"]currind" With NUMCLE
If TYPGES=3 & dim([L]VALEUR2)>1 & dim([L]CLEVALEUR)>0
 Assign "[G:"+ABFIC+"]currlen" With dim(CLESEC)
Else
 Assign "[G:"+ABFIC+"]currlen" With 0
Endif

Gosub DEFAUT From =PROGOBJ
Read =
If fstat : Raz [F] : Endif
Goto RST_ENV

#---------------------------------------------------------------------#
Subprog TITOBJ(ABREV,OPTIONS,VALEUR)
Value    Char ABREV()
Value    Char OPTIONS()
Variable Char VALEUR()

Local Char    PROGOBJ(GDIMFIC) , PROGSUB(GDIMFIC) , PROGSPE(GDIMFIC) , PROGSPV(GDIMFIC)
Local Integer PSTD , PSUB , PSPE , PSPV

Call SETPROG(ABREV,PROGOBJ,PROGSUB,PROGSPE,PROGSPV,PSTD,PSUB,PSPE,PSPV) From CONTOBJ

VALEUR = ""
If instr(1,OPTIONS,"!")
 Gosub TIT1
 If VALEUR="" : Gosub TIT2 : Endif
Else
 Gosub TIT2
 If VALEUR="" : Gosub TIT1 : Endif
Endif
End

$TIT1
If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
 Local File =GTABCPT+"ATEXTE" [ATX]
Endif
If PSTD
 Gosub TIT From =PROGOBJ
 VALEUR = TIT
Endif
Return

$TIT2
If !clalev([F:ATB]) : Local File ATABLE [ATB] : Endif
Read [ATB]ABRFIC=ABREV
If fstat=0
 Call TEXTE([F:ATB]INTITFIC,VALEUR) From OBJDIV
Endif
Return

#---------------------------------------------------------------------#
Subprog TITFNC(FNC,VALEUR)
Value    Char FNC()
Variable Char VALEUR()

VALEUR=""
If clalev([F:AFC])=0 : Local File AFONCTION [AFC] : Endif
Call LECTURE("AFC",FNC,"") From CONTOBJ
If fstat=0
 Call TEXTE([F:AFC]NOM,VALEUR) From OBJDIV
Endif
End

#---------------------------------------------------------------------#
Subprog TITZON(TAB,ZON,VALEUR)
Value    Char TAB(), ZON()
Variable Char VALEUR()
VALEUR=""
If clalev([F:ATZ])=0 : Local File ATABZON [ATZ] : Endif
If clalev([F:AVD])=0 : Local File AVIEWD  [AVD] : Endif
Read [ATZ]CODZONE=TAB;ZON
If !fstat
 Call TEXTE([F:ATZ]NOLONG,VALEUR) From OBJDIV
Else
 Read [AVD]AVD1=TAB;ZON : # Vue
 If !fstat
  Call TEXTE([F:AVD]FLDINT,VALEUR) From OBJDIV
 Endif
Endif
End

#---------------------------------------------------------------------#
Subprog TITACTION(ACTION,VALEUR)
Value    Char ACTION()
Variable Char VALEUR()
[L]VALEUR=""
If clalev([F:ACT])=0 : Local File ACTION [ACT] : Endif
Call LECTURE("ACT",[L]ACTION,"") From CONTOBJ
If fstat=0
 Call TEXTE([F:ACT]INTITA,[L]VALEUR) From OBJDIV
Endif
End

#---------------------------------------------------------------------#
Subprog SELOBJ(ABREV,OPTIONS,NBCOL,COL,TIT)
Value    Char    ABREV()
Value    Char    OPTIONS()
Variable Integer NBCOL
Variable Char    COL()(1..)
Variable Char    TIT()(0..)

Local Char    PROGOBJ(GDIMFIC) , PROGSUB(GDIMFIC) , PROGSPE(GDIMFIC) , PROGSPV(GDIMFIC)
Local Integer I , PSTD , PSUB , PSPE , PSPV

Call SETPROG(ABREV,PROGOBJ,PROGSUB,PROGSPE,PROGSPV,PSTD,PSUB,PSPE,PSPV) From CONTOBJ

If !PSTD : End : Endif

If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
 Local File =GTABCPT+"ACCES" [ACC] : # Pour le link dans OUVRE_LISTE : même base
Endif
Call TITOBJ(ABREV,OPTIONS,TIT(0))
TIT(0)  = mess(12,123,1)-TIT(0) : # Sélection
Gosub OUVRE_LISTE From =PROGOBJ

For I=1 To NBSEL
 If SELEXP(I)<>""
  COL(I) = SELEXP(I)
 Else
  COL(I) = SELZON(I)
 Endif
 TIT(I) = SELLIB(I)
Next I
NBCOL = NBSEL
End

#--------------------------------------------------------------------------------------------------------#
# CONTOBJW/CONTOBJN Actions spéciales pour court-circuiter les contrôles objet sur un type données objet
#--------------------------------------------------------------------------------------------------------#

$ACTION
Case ACTION
 When "TRT_DIV"
  Case TRAIT
   When "ACTLRES" : Gosub CTL_CODRES
   When Default   : Gosub TRT_DIV
  Endcase
 When "SEL_LISTE"
  Case LISTE
   When "ASELRES" : Gosub SEL_CODRES
  Endcase
Endcase
Return

$TRT_DIV
Case GACTION
 When "CONTOBJN" : # On ne fait aucun contrôle
 When "CONTOBJW" : # Le champ de type alpha est obligatoire
  If (type(VALEUR)>10 & VALEUR="")
   mkstat = 1
  Endif
 When "CONTSEL"
  Local Shortint STAT
  Call CONTSEL(PARAM(1),PARAM(2),VALEUR,PARAM(3),STAT)
  mkstat = STAT
Endcase
Return

#---------------------------------------------------------------------#
# Affectation du lien en web
#---------------------------------------------------------------------#

Subprog LIENS(OBJ,FIC,ZONE,SUPP,DESIG,VALEUR)
Value    Char OBJ
Value    Char FIC
Value    Char ZONE
Value    Char SUPP
Value    Char DESIG
Variable Char VALEUR()
Local File =FIC
Call LECTURE(OBJ,ZONE,SUPP) From CONTOBJ
VALEUR = evalue(DESIG)
End

#---------------------------------------------------------------------#
# Détermination des programmes
#---------------------------------------------------------------------#
Subprog SETPROG(ABREV,PROGOBJ,PROGSUB,PROGSPE,PROGSPV,PSTD,PSUB,PSPE,PSPV)
Value    Char    ABREV
Variable Char    PROGOBJ()
Variable Char    PROGSUB()
Variable Char    PROGSPE()
Variable Char    PROGSPV()
Variable Integer PSTD
Variable Integer PSUB
Variable Integer PSPE
Variable Integer PSPV
Local    Char    FICORG(GDIMFIC) , FICDES(GDIMFIC)
Local    Integer I , STAT
#
# Pour les objets de compta, on n'appelle pas les SUB/SPE
# Si la compta est en 130, on appelle le "WO" 140 s'il existe
#

#BJD.sn
#Speed improvment
#If we're importing, and this is the IMPSOH import, store local variables
#off to global. We will reuse these at a later time.
If dim(GSZIMPSOH) >=0 and GSZIMPSOH = "IMPSOH"
  If dim(GZABREV) < 0
    Global Char GZABREV, GZPROGOBJ(GDIMFIC), GZPROGSUB(GDIMFIC), GZPROGSPE(GDIMFIC), GZPROGSPV(GDIMFIC)
    Global Integer GZPSTD, GZPSUB, GZPSPE, GZPSPV
  Endif

  If GZABREV = ABREV
    PROGOBJ = GZPROGOBJ
    PROGSUB = GZPROGSUB
    PROGSPE = GZPROGSPE
    GZPROGSPV = GZPROGSPV
    PSTD = GZPSTD
    PSUB = GZPSUB
    PSPE = GZPSPE
    PSPV = GZPSPV
  Endif
Endif
#BJD.en

Local Integer I
If find(ABREV,GABRCPT(1..GNBTABCPT)) & GDOSCPT<>""
 PROGSUB = "" : PSUB = 0
 PROGSPE = "" : PSPE = 0
 PROGSPV = "" : PSPV = 0
 Call EXISTE_ADX(GMACCPT+":"+GPORTCPT,GDOSCPT,"WO"+ABREV,PSTD) From ORDSYS
 If GCPT130
  PROGOBJ = "WO"+ABREV
 # Paye V5 qui se déverse dans compta V140
 Elsif dim(GCPT140)>0 & GCPT140 & PSTD
  PROGOBJ = "WO"+ABREV
  Call EXISTE(filpath("TRT",PROGOBJ,"src"),PSTD) From ORDSYS
  If !PSTD
   FICDES = filpath("TRT",PROGOBJ,"src",nomap)
   FICORG = filpath("TRT",PROGOBJ,"src",GDOSCPT,"",GMACCPT+":"+num$(GPORTCPT))
   Call COPIE(FICORG,FICDES,STAT) From ORDSYS
   Call SYSTEME(adxmac(0),"valtrt"-nomap-PROGOBJ,"",STAT) From ORDSYS
   If STAT=0 : PSTD = 1 : Endif
  Endif
 #
 Else
  PROGOBJ = GTABCPT+"WO"+ABREV
 Endif
Else
 PROGOBJ = "WO"+ABREV
 PROGSUB = "SUB"+ABREV
 I = find(ABREV,GCODOBJ(1..GNBOBJ))
 If I
  Gosub NOMFIC From =PROGOBJ
  PSUB = 1
  PSTD = 1
  PROGSPE = "SPE"+ABREV
  PROGSPV = "SPV"+ABREV
  If GSPEOBJ(I)=0
   Call EXISTE_ADX("","",PROGSPE,PSPE) From ORDSYS
   If PSPE
    GSPEOBJ(I) = 2
   Else
    GSPEOBJ(I) = 1
   Endif
  Else
   PSPE = (GSPEOBJ(I)=2)
  Endif
  If GVEROBJ(I)=0
   Call EXISTE_ADX("","",PROGSPV,PSPV) From ORDSYS
   If PSPV
    GVEROBJ(I) = 2
   Else
    GVEROBJ(I) = 1
   Endif
  Else
   PSPV = (GVEROBJ(I)=2)
  Endif
 Else
  PROGSPE = "SPE"+ABREV
  Call EXISTE_ADX("","",PROGSPE,PSPE) From ORDSYS
  Call EXISTE_ADX("","",PROGSUB,PSUB) From ORDSYS
  Call EXISTE_ADX("","",PROGOBJ,PSTD) From ORDSYS
 Endif
Endif

#BJD.sn
If dim(GZABREV) > 0 and GZABREV = "" and dim(GSZIMPSOH) >= 0 and GSZIMPSOH = "IMPSOH"
  GZABREV   = ABREV
  GZPROGOBJ = PROGOBJ
  GZPROGSUB = PROGSUB
  GZPROGSPE = PROGSPE
  GZPROGSPV = PROGSPV
  GZPSTD    = PSTD
  GZPSUB    = PSUB
  GZPSPE    = PSPE
  GZPSPV    = PSPV
Endif
#BJD.en
End

#------------------------------------------------------------------------------------------#
# Liste des codes réservés hors environnement courant
#------------------------------------------------------------------------------------------#

$SEL_CODRES
Local Integer ER , I , K , L , MAXTB , NBTB , PARTYP
MAXTB = 200
Local Char    TIT(50)(0..5) , TEXTE(50)(1..MAXTB,1..5)
Local Integer TBTYP(1..MAXTB) , TBNUM(1..MAXTB) , TBDEV(1..MAXTB)
Local Char    TBPLG(30)(1..MAXTB) , TBCOM(50)(1..MAXTB) , TBCOD(10)(1..MAXTB)
If PARAM(1)<>""
 PARTYP = val(PARAM(1))
Endif
Onerrgo ER
If clalev([F:ACD])=0 : Local File ACTLDEV [ACD] : Endif
If nomap<>GDOSX3 : Local File =GDOSX3+".ATEXTRA" [AXX] : Endif
Onerrgo
If ER : OK = 0 : Return : Endif
NBTB = 0
For [ACD]
 For I=1 To [F:ACD]NBLIG
  If PARTYP=0 or PARTYP=[F:ACD]TYP(I-1)
   K = instr(1,[F:ACD]RAN(I-1),"-")
   If K
    NBTB += 1
    TBTYP(NBTB) = [F:ACD]TYP(I-1)
    If TBTYP(NBTB)>=2
     TBNUM(NBTB) = val(left$([F:ACD]RAN(I-1),K-1))
    Endif
    TBPLG(NBTB) = [F:ACD]RAN(I-1)
    TBCOM(NBTB) = func AFNC.TEXTRA("ACTLDEV","INTRAN",[F:ACD]COD,num$(I-1))
    TBCOD(NBTB) = [F:ACD]COD
    TBDEV(NBTB) = [F:ACD]DEV
   Endif
  Endif
 Next I
Next ACD
Sorta NBTB TBTYP,TBNUM,TBPLG,TBCOM,TBCOD,TBDEV Order By TBTYP(indice+1),TBNUM(indice+1),TBPLG(indice+1)
L = 0
For I=1 To NBTB
 If L<>TBTYP(I)
  NBTEX += 1
  TEX(NBTEX) = ""
  TEXTE(NBTEX,3) = "***"-mess(TBTYP(I),7865,1)-"***"
  L = TBTYP(I)
 Endif
 K = instr(1,TBPLG(I),"-")
 NBTEX += 1
 TEX(NBTEX) = left$(TBPLG(I),K-1)
 TEXTE(NBTEX,2) = right$(TBPLG(I),K+1)
 TEXTE(NBTEX,3) = TBCOM(I)
 TEXTE(NBTEX,4) = func AFNC.TEXTRA("ACTLDEV","INTCOD",TBCOD(I),"")
 TEXTE(NBTEX,5) = mess(TBDEV(I),7867,1)
Next I
TIT(0) = mess(259,133,1) : # Liste des codes réservés
TIT(1) = mess(144,141,1) : # Début
TIT(2) = mess(18,2,1)    : # Fin
TIT(3) = mess(172,115,1) : # Commentaires
TIT(4) = mess(2,44,1)    : # Développement
TIT(5) = mess(46,104,1)  : # Niveau
Return

#------------------------------------------------------------------------------------------#
# Codes réservés (action de contrôle générique)
#------------------------------------------------------------------------------------------#

$CTL_CODRES
Call PLAGE(PARAM(1),val(PARAM(2)))
Return

#-----------------------------------------------------------------------------------------------------#
# Plages réservées (écrans, traitements, tables, états, profils menus, menus, tables diverses)
#-----------------------------------------------------------------------------------------------------#

Subprog PLAGE(CODE,TYP)
Value Char CODE
Value Integer TYP

Local Integer ER , I , K , MOTRES

If CODE="" or TYP=0 : End : Endif

If TYP=1 : # Objet
 MOTRES = find(CODE,"COM1","COM2","COM3","COM4","COM5","COM6","COM7","COM8","COM9")
 MOTRES += find(CODE,"AUX","LPT1","LPT2","LPT3","PRN","NUL")
 If MOTRES
  Call ERREUR(CODE-":"-mess(205,133,1)) From GESECRAN : # Code réservé
  mkstat = 1 : End
 Endif
Endif

Onerrgo ER
If clalev([F:ACD])=0 : Local File ACTLDEV [ACD] : Endif
If nomap<>GDOSX3 : Local File =GDOSX3+".ATEXTRA" [AXX] : Endif
Onerrgo
If ER : End : Endif

Gosub PLAGE_CTL

End

#----------------------------#
$PLAGE_CTL

Local Integer OKPLG , OKENV , OK
Local Char    DEB(30) , FIN(30)

# Contrôle
For [ACD]
 If TYP=4 : # Champs
  OKENV = 1
  If ENVCUR=1 & ENVOBJ=1 & [F:ACD]DEV<>1
   OKENV = 0 : # En développement std, sur un écran std, on ne peut pas utiliser des champs spé
  Elsif ENVCUR<>1 & ENVOBJ=1 & [F:ACD]DEV=1
   OKENV = 0 : # En développement spé, sur un écran std, on ne peut pas utiliser des champs std
  Endif
 Else
  ER = 0
  Onerrgo ER
  OKENV = evalue([F:ACD]ENV)
  Onerrgo
  If ER : OKENV = 0 : Endif
  Case [F:ACD]PRO
   When 2 : OKENV *= (GPRODUIT=-1) : # Superviseur
   When 3 : OKENV *= (GPRODUIT=0)  : # X3
   When 4 : OKENV *= (GPRODUIT=1)  : # Géode
   When 5 : OKENV *= (GPRODUIT=2)  : # Paye
  Endcase
 Endif
 For I=1 To [F:ACD]NBLIG
  If [F:ACD]TYP(I-1)=[L]TYP
   K = instr(1,[F:ACD]RAN(I-1),"-")
   If K
    DEB = left$([F:ACD]RAN(I-1),K-1)
    FIN = right$([F:ACD]RAN(I-1),K+1)
    Case [L]TYP
     When 1 , 4 : # Objets/Champs
      OKPLG = (CODE>=DEB & CODE<=FIN)
     When 2 , 3 : # Menus locaux/Tables diverse
      OKPLG = (val(CODE)>=val(DEB) & val(CODE)<=val(FIN))
    Endcase
    If OKPLG
     If !OKENV
      # Code réservé
      Call AVERTIR(mess(205,133,1)-func AFNC.TEXTRA("ACTLDEV","INTCOD",[F:ACD]COD,"")-"("+[F:ACD]COD+")",OK) From GESECRAN
      If OK<>2 : mkstat = 1 : Endif
     Endif
     Break 2
    Endif
   Endif
  Endif
 Next I
Next ACB
Return

$ER
ER = errn
Resume

#-----------------------------------------------------------------------------------------------------#
# Plages réservées pour les zones (écrans, tables et vues)
#-----------------------------------------------------------------------------------------------------#

Subprog PLAGE_ZON(OBJET,ZONE)
Value Char OBJET , ZONE

Local Integer ER , I , K
Local Char    CODE(GLONAVA) , ZONRES(GLONAVA)(1..30)
Local Integer ENVOBJ , ENVCUR , TYP , NBRES

Gosub ZONRES

If OBJET="" or find(ZONE,"",ZONRES(1..NBRES)) : End : Endif

Onerrgo ER
If clalev([F:ACD])=0 : Local File ACTLDEV [ACD] : Endif
If nomap<>GDOSX3 : Local File =GDOSX3+".ATEXTRA" [AXX] : Endif
Onerrgo
If ER : End : Endif

# Recherche niveau de développement courant
ENVCUR = 0
For [ACD]
 ER = 0
 Onerrgo ER
 OKENV = evalue([F:ACD]ENV)
 Onerrgo
 If ER : OKENV = 0 : Endif
 Case [F:ACD]PRO
  When 2 : OKENV *= (GPRODUIT=-1) : # Superviseur
  When 3 : OKENV *= (GPRODUIT=0)  : # X3
  When 4 : OKENV *= (GPRODUIT=1)  : # Géode
  When 5 : OKENV *= (GPRODUIT=2)  : # Paye
 Endcase
 If OKENV
  ENVCUR = max(ENVCUR,[F:ACD]DEV) : # Niveau de développement
 Endif
Next ACD

# Recherche niveau développement de l'objet
For [ACD]
 For I=1 To [F:ACD]NBLIG
  If [F:ACD]TYP(I-1)=1 : # Objet
   K = instr(1,[F:ACD]RAN(I-1),"-")
   If K
    If OBJET>=left$([F:ACD]RAN(I-1),K-1) & OBJET<=right$([F:ACD]RAN(I-1),K+1)
     ENVOBJ = [F:ACD]DEV
     Break 2
    Endif
   Endif
  Endif
 Next I
Next ACB

# Contrôle zone
CODE = ZONE
TYP  = 4
Gosub PLAGE_CTL

End

#------------#
$ZONRES
NBRES = 0
NBRES += 1 : ZONRES(NBRES) = "CREUSR"
NBRES += 1 : ZONRES(NBRES) = "CREDAT"
NBRES += 1 : ZONRES(NBRES) = "CRETIM"
NBRES += 1 : ZONRES(NBRES) = "UPDUSR"
NBRES += 1 : ZONRES(NBRES) = "UPDDAT"
NBRES += 1 : ZONRES(NBRES) = "UPDTIM"
NBRES += 1 : ZONRES(NBRES) = "EXPNUM"
NBRES += 1 : ZONRES(NBRES) = "MODULE"
NBRES += 1 : ZONRES(NBRES) = "CREDATTIM"
NBRES += 1 : ZONRES(NBRES) = "UPDDATTIM"
NBRES += 1 : ZONRES(NBRES) = "AUUID"
NBRES += 1 : ZONRES(NBRES) = "ENAFLG"
Return

#------------------------------------------------------------------------------------------#
# Codes réservés (écrans, traitements, tables, états, profils menus) -> obsolète
#------------------------------------------------------------------------------------------#

Subprog RESERVE(CODE)
Value Char CODE
End

#------------------------------------------------------------------------------------------#
# Codes réservés pour les objets
# Spécifique, superviseur, produits (obsolète)
#------------------------------------------------------------------------------------------#

Subprog RESERVEAOB(CODE)
Value Char CODE
End

#--------------------------------------------------------------------------------------------------#
# Le slash est interdit dans un code fiche utilisé dans la construction d'un nom de traitement
#--------------------------------------------------------------------------------------------------#

Subprog CTLSLASH(CODE)
Variable Char CODE
If instr(1,CODE,"/")
 Call ERREUR("/ :"-mess(94,123,1)) From GESECRAN : # Caractère interdit
 mkstat = 1
Endif
End

#--------------------------------------------------------------------------------------------------#
# Le type de données AVA ayant été passé à 12 pour la migration des clients ligne 1000,
# la longueur des champs de tables et zones d'écrans reste limité à 10 en saisie pour éviter
# des effets de bords dans les fonctions en cours de tests v5
#--------------------------------------------------------------------------------------------------#

Subprog LNGFLD(AZC,CLEOBJ)
Variable Char    AZC()
Value    Char    CLEOBJ
Local Integer MAXI
MAXI = 10
If !find(GABREV,"ATB","AMK") or left$(CLEOBJ,2)<>"XI"
 If len(AZC)>MAXI
  Call ERREUR(mess(76,126,1)-num$(MAXI)) From GESECRAN : # Le nombre de caractères est limité à
  mkstat = 1 : End
 Endif
Endif
End

